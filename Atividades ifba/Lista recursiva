#include <conio.h>
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <math.h>


// Ex1 
int fatorial(int n) {
	if(n == 1) {
		return 1;
	}
	return n * fatorial(n - 1);
}
/*----------------------------------------------------------------------------------------------------------*/

// Ex2 
int fib(int n) {
	if(n <= 1) {
		return 1;
	}
	return fib(n - 1) + fib(n - 2);
}
/*----------------------------------------------------------------------------------------------------------*/

// Ex3 
int inverte(int n) {
	if((n / 10) == 0) {
		return n;
	}
	return inverte(n / 10) + (n % 10) * pow(10, abs(log10(n)));
}


/*----------------------------------------------------------------------------------------------------------*/

// Ex4 
int somaVetor(int vet[], int n) {
	if(n == 1) {
		return vet[0];
	}
	return vet[n - 1] + somaVetor(vet, n - 1);
}
/*----------------------------------------------------------------------------------------------------------*/

// Ex5 
int soma1aN(int n) {
	if(n == 1) {
		return 1;
	}
	return n + soma1aN(n - 1);
}
/*----------------------------------------------------------------------------------------------------------*/

--------------------------------------------------------------------------------------------------------------

#include <conio.h>
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <math.h>

// Ex6 
int potenciakn(int k, int n) {
	if(n == 1) {
		return k;
	}
	return k * potenciakn(k, n - 1);
}


int main(){
	
	
	int k,n;
	int resultado;
	
	printf("\n Digite K \n ");
	scanf("%d",&k);
	
		printf("\n Digite N \n ");
	scanf("%d",&n);
	
	resultado=potenciakn(k,n);
	
	printf("\n O resultado eh:%d \n",resultado);
	
}
----------------------------------------------------------------------------

// Ex7 
float inverteVetor(float vet[], int n) {
	int aux;
	if(n % 2 == 0) {
		aux = 0;
	} else {
		aux = -1;
	}
	float interna(float vet[], int n, int i) {
		if(n == i) {
			return vet[n];
		}
		float aux;
		interna(vet, n - 1, i + 1);
		aux = vet[n-1];
		vet[n-1] = vet[i+1];
		vet[i+1] = aux;
	}
	return(interna(vet, n, aux));
}
--------------------------------------------------------------------------------------------------

// Ex8

int maxDivCom(int x, int y) {
	if( y == 0) {
		return x;
	}
	maxDivCom(y, x % y);
}


#include <iostream>
#include <stdio.h>
#include <string.h>
#include<conio.h>


int Verificar(int n, int k, int i) {
	if(n % 10 == k) {
		i++;
	}
	if(n % 10 == n) {
		return i;
	}
	Verificar(n / 10, k, i);
}


int main()

{
	
	int n,resultado,k,i;
	
	printf("Digite o numero:\n");
	scanf("%d",&n);
	
	printf("Digite o numero para comparacao:\n");
	scanf("%d",&k);
	
	
	resultado= Verificar(n,k,i);
	
	printf("A resposta eh: %d",resultado);
	
	
	
}

--------------------------------------------
9-

#include <iostream>
#include <stdio.h>
#include <string.h>
#include<conio.h>


int Verificar(int n, int k, int i) {
	if(n % 10 == k) {
		i++;
		
		printf("\n %d \n ",i);
	}
	if(n % 10 == n) {
		return i;
	}
	Verificar(n / 10, k, i);
}


int main()

{
	
	int n,resultado,k,i;
	
	printf("Digite o numero:\n");
	scanf("%d",&n);
	
	printf("Digite o numero para comparacao:\n");
	scanf("%d",&k);
	
	
	resultado= Verificar(n,k,i);
	
	printf("A resposta eh: %d",resultado);
	
	
	
}

-------------------------------------------------------------


// Ex10 
int multRec(int a, int b) {
	if(n1 == 0 || n2 == 0) {
		return 0;
	}
	if(n2 == 1) {
		return a;
	}
	return a + multRec(n1, n2 - 1);
}

--------------------------------------------------------

int multRec(int a, int b) {
	if(n1 == 0 || n2 == 0) {
		return 0;
	}
	if(n2 == 1) {
		return a;
	}
	return a + multRec(n1, n2 - 1);
}

int main()

{
	
	int n1,n2,resultado;
	
	printf("Digite A:\n");
	scanf("%d",&n1);
	
	printf("Digite B:\n");
	scanf("%d",&n2);
	
	resultado=multRec(a,b);
	
	printf("O resultado eh:%d",resultado);
	
}
-------------------------------------------------------------
Ex11

#include <iostream>
#include <stdio.h>
#include <string.h>
#include<conio.h>

int Naturais(int n) {
	if(n == -1) {
		return 0;
	}
	1 + Naturais(n - 1);
	printf("%d ", n);
}

int main()

{
	
	int n,resultado,k,i;
	
	printf("Digite o numero:\n");
	scanf("%d",&n);
	
	resultado=Naturais(n);

}

-----------------------------------------------------------------------
Ex:12

#include <iostream>
#include <stdio.h>
#include <string.h>
#include<conio.h>

int Naturaisdec(int n) {
	if(n == -1) {
		return 0;
	}
	printf("%d ", n);
	Naturaisdec(n - 1);
}

int main()

{
	
	int n,resultado,k,i;
	
	printf("Digite o numero:\n");
	scanf("%d",&n);
	
	resultado=Naturaisdec(n);

}


-----------------------------------------------------------------------
Ex13
#include <iostream>
#include <stdio.h>
#include <string.h>
#include<conio.h>

int Parcres(int n) {
	
	int r;
	
		if(n%2==0)
	{
	if(n < 0) {
		return 0;
	}
	2 + Parcres(n - 2);
	printf("%d ", n);
}
else 
{
	r=n-1;
	
	if(r < 0) {
		return 0;
	}
	2 + Parcres(r - 2);
	printf("%d ", r);
	
}
}


int main()

{
	
	int n,resultado,k,i;
	
	printf("Digite o numero:\n");
	scanf("%d",&n);
	

	
	resultado=Parcres(n);

}




-----------------------------------------------------------------------
14

#include <iostream>
#include <stdio.h>
#include <string.h>
#include<conio.h>

int Parcres(int n) {
	
	int r;
	
		if(n%2==0)
	{
	if(n < 0) {
		return 0;
	}
	printf("%d ", n);
	Parcres(n - 2);
}
else 
{
	r=n-1;
	
	if(r < 0) {
		return 0;
	}
	printf("%d ", r);
	Parcres(r - 2);
}
}


int main()

{
	
	int n,resultado,k,i;
	
	printf("Digite o numero:\n");
	scanf("%d",&n);

	resultado=Parcres(n);

}


-----------------------------------------------------------------------
// Ex15 

int fatDuplo(int n) {
	if(n == 1) {
		return 1;
	}
	if(n % 2 == 0) {
		return 0;
	}
	return n * fatDuplo(n - 2);
}

// Ex16 
int fatQuadruplo(int n) {
	int interna(int n, int k) {
		if(n == k) {
			return  k;
		}
		return n * interna(n - 1, k);
	}
	return interna(2 * n, n + 1);
}


// Ex17 
int superFat(int n) {
	if(n == 0 || n == 1) {
		return 1;
	}
	int interna(int n) {
		if(n == 0 || n == 1) {
			return 1;
		}
		return n * interna(n - 1);
	}
	return interna(n) * superFat(n - 1);

}
----------------------------------------------


// Ex18 
long int hiperFat(int n) {
	if(n == 1 || n == 0) {
		return 1;
	}
	long int interna(int n, int k) {
		if(k == 1) {
			return n;
		}
		return n * interna(n, k - 1);
	}

	return interna(n, n) * hiperFat(n - 1);
}

------------------------------------------------


// Ex19 

unsigned int fatExp(int n) {
	if(n == 0) {
		exit(0);
	}
	if(n == 1 || n == 2) {
		return n;
	}
	unsigned int interna(int n, int k) {
		if(k == 1) {
			return n;
		}
		return interna(n * interna(n, k - 1), k - 1);
	}
	return interna(n, n - 1);
}
----------------------------------------------


// Ex20 

int tribonacci(int n) {
	if(n == 0 || n == 1) {
		return 0;
	}
	if(n == 2) {
		return 1;

	}
	return tribonacci(n - 1) + tribonacci(n - 2) + tribonacci(n - 3);
}

------------------------------------------------------------------------

//Ex21 
int tetranacci(int n) {
	if(n == 0 || n == 1 || n == 2) {
		return 0;
	}
	if(n == 3) {
		return 1;
	}
	return tetranacci(n - 1) + tetranacci(n - 2) + tetranacci(n - 3) + tetranacci(n - 4);
}
/*----------------------------------------------------------------------------------------------------------*/

// Ex22 
int padovan(int n) {
	if(n == 0 || n == 1 || n == 2) {
		return 1;
	}
	return padovan(n - 2) + padovan(n - 3);
}
/*----------------------------------------------------------------------------------------------------------*/

// Ex23 

int pell(int n) {
	if(n == 0) {
		return 0;
	}
	if(n == 1) {
		return 1;
	}
	return 2 * pell(n - 1) + pell(n - 2);
}
-----------------------------------------------------------------------------------------------------------------


// Ex24 
int catalan(int n) {
	if(n == 0) {
		return 1;
	}
	return 2 * (2 * n - 1) * catalan(n - 1) / (n + 1);
}
------------------------------------------------------------------------------------------------------------------------
// Ex25 
char * palaFibonacci(int n) {

	char * interna(int n, char * menos1, char * menos2) {
		if(n == 0) {
			return menos2;
		}
		if(n == 1) {
			return menos1;
		}
		int tamMenos1 = strlen(menos1);
		int tamMenos2 = strlen(menos2);
		char aux[tamMenos1];
		strcpy(aux,menos1);
		char auxMenos1[tamMenos1 + tamMenos2 + 1];
		strcpy(auxMenos1,menos1);
		strcat(auxMenos1,menos2);
		return interna(n - 1, auxMenos1, aux);
	}
	char * a = "a";
	char * b = "b";
	return interna(n, a, b);
}

/*----------------------------------------------------------------------------------------------------------*/
------------

//Ex26

a)
int binario(int n) {
	int nbit = 1;
	int m = n;
	while(m > 1) {   
		nbit++;
		m /= 2;
	}

b)
int mult(int a, int aux, int b) {
		if(a == 0 || b == 0) return 0;
		if(b == 1) return a;
		a += aux;
		 return mult(a, aux, b - 1);

d)
int sequencia(int n) {
	if(n == 1) return 1;
	if(n == 2) return 2;
	return 2 * sequencia(n - 1) + 3 * sequencia(n - 2);



-------------------------------------------------------------------------



//28)

int multiplicacaoRussa(int A, int B) {
	int interna(int A, int B, int soma) {
		if(A == 0) return soma;
		if(A % 2 != 0) soma += B;
		B = B * 2;
		return interna(A/ 2, B, soma);
	}
	int soma = 0;
	interna(A, B, soma);
}


#include <iostream>
#include <stdio.h>
#include <string.h>
#include<conio.h>




	int multiplicacaoRussa(int A, int B, int soma) {
		soma = 0;
		
		if(A == 0) return soma;
		if(A % 2 != 0) soma += B;
		B = B * 2;
		return multiplicacaoRussa(A/ 2, B, soma);
	
	  multiplicacaoRussa(A, B, soma);

}

int main()
{
	
	int A,B,resultado,soma;
	
	printf("Digite o numero A: \n");
	scanf("%d",&A);
	
	printf("Digite o numero B: \n");
	scanf("%d",&B);
	
	resultado= multiplicacaoRussa(A,B,soma);
	
	printf("O resultado eh:%d",resultado);
}

-----------------------------------------------------------------------------------
29
#include <iostream>
#include <stdio.h>
#include <string.h>
#include<conio.h>

int h(int m, int n) {
	if(m < 1 || n < 1) return -1;
	if(n == 1) return m + 1;
	if(m == 1) return n - 1;
	return h(m, n - 1) + h(m - 1, n);
}


int main()

{
	
	int n,resultado,k,i,m;
	
	printf("Digite M");
	scanf("%d",&m);
	
	printf("Digite N");
	scanf("%d",&n);

	resultado=h(m,n);
	
	printf("O resultado eh: %d",resultado);

}


-----------------------------------------------------------------------------------

// 30) 
   

int A(int m, int n) {
	if(m < 0 || n < 0) return -1;
	if(m == 0) return n + 1;
	if(m > 0 && n == 0) return A(m - 1, 1);
	if(m > 0 && n > 0) return A(m - 1, A(m, n - 1));
}

------------------------------------------------------------------------------------------------------
// 31)

int interna(int elemento, int limite, int incremento, int soma) {
		if(elemento > limite) return soma;
		soma += elemento;
		elemento += incremento;
		return interna(elemento, limite, incremento, soma);
	}
-------------------------------------------------------------------------------------------------------


// 32) 

float somaSerie2(int n) {
	float interna(int n, float soma) {
		if(n == 0) {
			return soma;
		}
		soma += ((1.0 + pow(n, 2.0)) / n);
		return interna(n - 1, soma);
	}
	float soma = 0.0;
	return interna(n, soma);
}

void exibeSomaSerie2(int n) {
	int * interna(int n, int i, int j, int v[]) {
		if(i == n) return v;
		v[i] = (int)((1.0 + pow(j, 2.0)) / j);
		printf("%d", v[i]);
		i += 1;
		v[i] = 0x20;
		printf("%c", v[i]);
		return interna(n, i + 1, j + 1, v);
	}
	int i = 0;
	int j = 1;
	int v[2 * n];
	interna(2 * n, i, j, v);
}

-------------------------------------------------------------------------------------------------------

/* 33)//

int * menorElementoVetor(int * vet, int n){
	int interna(int * vet, int n, int teste){
		if(n == 0) return teste;
		if(vet[n - 1] > vet[n]){
			int aux = vet[n];
			vet[n] = vet[n - 1];
			vet[n - 1] = aux;
			teste++;
		}
		interna(vet, n - 1, teste);
	}
	int teste = 0;
	int r = interna(vet, n - 1, teste);
	if(r == 0){
		return vet;
	}
	else{
		teste = 0;
		menorElementoVetor(vet, n);
	}
}

/*----------------------------------------------------------------------------------------------------------*/

-------------------------------------------------------------------------------------------------------
 34) //

void imprimeSerie(int i, int j, int k){
	void interna(int i, int j, int k, int soma){
		if(soma > j) exit(0);
		printf("%d ",soma);
		soma += k;
		return interna(i, j, k, soma);
	}
	int soma = i;
	return interna(i, j, k, soma);
}
----------------------------------------------------------------------------------------------------




// 35) 
int converteParaBinario(int n){
    if (n < 2) 
        return n;
    return ( 10 * converteParaBinario( n / 2 ) ) + n % 2;
}

----------------------------------------------------------------------------------------------------------


// 36) 

int palindromoTeste(char * str) {
	int interna(char * s, int i, int pos, int teste) {
		if(pos == -1) {
			if(teste) return 0;
			return 1;
		}
		if(s[i] != s[pos]) {
			teste++;
			return 0;
		}
		return interna(s, i + 1, pos - 1, teste);
	}
	int i, t, comp, pos;
	pos = 0;
	comp = strlen(str);
	char s[comp];
	for(i = 0; i < comp; i++){
		if(str[i] < 0x61 || str[i] > 0x7a){
			continue;
		}
		s[pos] = str[i];
		pos++;
	}
	return interna(s, 0, pos - 1, 0);
}

/*----------------------------------------------------------------------------------------------------------*/


// 38)


int somaIncremento(int a, int b){
	if(a == 0) return b;
	if(b == 0) return a;
	return 1 + somaIncremento(a, b - 1);
}

---------------------------------------------------------------------------------------

#include <iostream>
#include <stdio.h>
#include <string.h>
#include<conio.h>




	
int somaIncremento(int a, int b){
	if(a == 0) return b;
	if(b == 0) return a;
	return 1 + somaIncremento(a, b - 1);
}

int main()
{
	
	int a,b,resultado;
	
	printf("Digite o numero A: \n");
	scanf("%d",&a);
	
	printf("Digite o numero B: \n");
	scanf("%d",&b);
	
	resultado= somaIncremento(a,b);
	
	printf("O resultado eh:%d",resultado);
}

----------------------------------------------------------------------------------------------------------------
// 39)


#include <iostream>
#include <stdio.h>
#include <string.h>
#include<conio.h>




	
int multIncremento(int a, int b){
	if(a == 0 || b == 0) return 0;
	if(b == 1) return a;
	return a + multIncremento(a, b - 1);
}

int main()
{
	
	int a,b,resultado;
	
	printf("Digite o numero A: \n");
	scanf("%d",&a);
	
	printf("Digite o numero B: \n");
	scanf("%d",&b);
	
	resultado= multIncremento(a,b);
	
	printf("O resultado eh:%d",resultado);
}
-------------------------------------------------------------------------------------


#include <iostream>
#include <stdio.h>
#include <string.h>
#include<conio.h>




	
int multIncremento(int a, int b){
	if(a == 0 || b == 0) return 0;
	if(b == 1) return a;
	if(a==1) return b;
	return a + multIncremento(a, b - 1);
}

int main()
{
	
	int a,b,resultado;
	
	printf("Digite o numero A: \n");
	scanf("%d",&a);
	
	printf("Digite o numero B: \n");
	scanf("%d",&b);
	
	resultado= multIncremento(a,b);
	
	printf("O resultado eh:%d",resultado);
}
--------------------------------------------------------------------

/*----------------------------------------------------------------------------------------------------------*/

//40) 


int sequencia2(int n){
	if(n == 1) return 1;
	if(n == 2) return 2;
	return 2  * sequencia2(n - 1) + 3 * sequencia2(n - 2);
}

/*----------------------------------------------------------------------------------------------------------*/

// 41) 

void arranjo(int n){
    int fat = fatorial(n);
    char A(char a){
        if(a ==  0x41 + n){
            if(fat < 0) exit(0);
            a = 'B';
            fat--;
            printf("\n");
        }
        printf("%c", a);
        A(a + 1);
    }
    A('A');


}
------------------------------------------------------


// 43) 


int fibonacciGeneralizada(int a, int b, int n){
	if(n < 0) return -1;
	if(n == 0) return a;
	if(n == 1) return b;
	return fibonacciGeneralizada(a, b, n - 1) + fibonacciGeneralizada(a, b, n - 2);
}

000000000000000000000000000000000000000000000000000000000000



// 44) 


int somaCubos(int n){
	int interna(int i, int j, int n, int soma){
		if(j > n) return soma;
		soma  += i * i * i;
		return interna(i + 1, j + 1, n, soma);
	}
	int i = 0; int soma = 0; int j = 0;
	return interna(i, j, n, soma);
}

-------------------------------------------------------------------------------
45


#include <iostream>
#include <stdio.h>
#include <string.h>
#include<conio.h>






int somaDigitos(int n){
	if(n < 10) return n % 10;
	return somaDigitos(n / 10) + n % 10;
}


int main()

{
	
	int n,resultado;
	
	printf("Digite o numero:\n");
	scanf("%d",&n);
	
	
	resultado= somaDigitos(n);
	
	printf("A resposta eh: %d",resultado);
	
	
	
}

----------------------------------------------------------------------------------
46


#include <iostream>
#include <stdio.h>
#include <string.h>
#include<conio.h>


float media(int vet[], int n){
	float interna(int vet[], int n, int aux, float soma){
		
		if(n < 0) return soma / aux;
		
		soma = soma + vet[n];
		
		return interna(vet, n - 1, aux, soma);
	}
	int soma = 0.0;
	return interna(vet, n - 1, n, soma);
}




----------------------------------------------------------------------------------------





